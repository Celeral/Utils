/*
 * Copyright Â© 2021 Celeral.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.celeral.utils;

import java.util.HashMap;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * A Thread Factory where one can decide how they want to name the threads generated by this
 * factory. In addition to the name of the threads, the daemon property of the thread is also
 * inherited from the group that's registered with this ThreadFactory.
 *
 * <p>Both the pattern for the name and the group can be changed anytime.
 *
 * @since 1.1.0
 */
public class NamedThreadFactory implements ThreadFactory {
  private static final AtomicInteger poolSequence = new AtomicInteger();
  private final AtomicInteger threadSequence = new AtomicInteger();

  private ThreadGroup group;
  private String pattern;

  /**
   * Creates a new ThreadFactory using the group and the patten.
   *
   * @param group group in which the threads are created
   * @param pattern name of threads is derived by substituting values in the pattern
   */
  public NamedThreadFactory(ThreadGroup group, String pattern) {
    this.group = group;
    this.pattern = pattern;
    poolSequence.incrementAndGet();
  }

  /**
   * Creates a new ThreadFactory using the group and default pattern.The default pattern is
   * "{groupName}-{poolSequence}-{threadSequence}"
   *
   * @param group group in which threads are created
   */
  public NamedThreadFactory(ThreadGroup group) {
    this(group, String.format("{%s}-{%s}-{%s}", GROUP_NAME, POOL_SEQUENCE, THREAD_SEQUENCE));
  }

  @Override
  public Thread newThread(Runnable r) {
    Thread t = new Thread(getGroup(), r);
    initThreadName(t);

    if (getGroup().isDaemon() != t.isDaemon()) {
      t.setDaemon(getGroup().isDaemon());
    }

    return t;
  }

  protected void initThreadName(Thread t) {
    String threadName = this.getPattern();

    HashMap<String, String> hm = new HashMap<>();
    hm.put(GROUP_NAME, getGroup().getName());
    hm.put(POOL_SEQUENCE, Integer.toString(poolSequence.get()));
    hm.put(THREAD_SEQUENCE, Integer.toString(threadSequence.incrementAndGet()));
    hm.put(THREAD_ID, Long.toString(t.getId()));
    hm.put(THREAD_NAME, t.getName());

    Pattern p = Pattern.compile("(\\{[^}]+\\})");
    Matcher m = p.matcher(threadName);
    while (m.find()) {
      String substitute = hm.get(m.group().replace("{", "").replace("}", ""));
      if (substitute != null) {
        threadName = threadName.replace(m.group(), substitute);
      }
    }

    t.setName(threadName);
  }

  public static final String THREAD_SEQUENCE = "threadSequence";
  public static final String POOL_SEQUENCE = "poolSequence";
  public static final String GROUP_NAME = "groupName";
  public static final String THREAD_ID = "threadId";
  public static final String THREAD_NAME = "threadName";

  /**
   * Gets the current group of which newly created threads are members of.
   *
   * @return currently registered threadgroup
   */
  public ThreadGroup getGroup() {
    return group;
  }

  /**
   * Replaces the group to create any new threads.
   *
   * @param group threadgroup to create new threads from
   */
  public void setGroup(ThreadGroup group) {
    this.group = group;
  }

  /**
   * Gets the current pattern used to name the threads.
   *
   * @return current pattern for the names of new threads
   */
  public String getPattern() {
    return pattern;
  }

  /**
   * Replace the pattern to create any new threads.
   *
   * @param pattern the pattern for names of the new threads
   * @see #GROUP_NAME
   * @see #POOL_SEQUENCE
   * @see #THREAD_ID
   * @see #THREAD_NAME
   * @see #THREAD_SEQUENCE
   */
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }
}
